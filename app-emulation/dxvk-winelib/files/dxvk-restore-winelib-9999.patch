diff --git a/README.md b/README.md
index 82a1fc1a..fde2a2a8 100644
--- a/README.md
+++ b/README.md
@@ -56,6 +56,8 @@ cd /your/target/directory/build.64
 ninja install
 ```
 
+A winelib build can be created by adding the `--winelib` argument.
+
 #### Compiling manually
 ```
 # 64-bit build. For 32-bit builds, replace
diff --git a/build-wine32.txt b/build-wine32.txt
new file mode 100644
index 00000000..24ff2e96
--- /dev/null
+++ b/build-wine32.txt
@@ -0,0 +1,15 @@
+[binaries]
+c = 'winegcc'
+cpp = 'wineg++'
+ar = 'ar'
+strip = 'strip'
+
+[properties]
+needs_exe_wrapper = true
+
+[host_machine]
+system = 'linux'
+cpu_family = 'x86'
+cpu = 'i686'
+endian = 'little'
+
diff --git a/build-wine64.txt b/build-wine64.txt
new file mode 100644
index 00000000..46abe86e
--- /dev/null
+++ b/build-wine64.txt
@@ -0,0 +1,15 @@
+[binaries]
+c = 'winegcc'
+cpp = 'wineg++'
+ar = 'ar'
+strip = 'strip'
+
+[properties]
+needs_exe_wrapper = true
+
+[host_machine]
+system = 'linux'
+cpu_family = 'x86_64'
+cpu = 'x86_64'
+endian = 'little'
+
diff --git a/meson.build b/meson.build
index b9dec25f..43719115 100644
--- a/meson.build
+++ b/meson.build
@@ -47,64 +47,108 @@ else
   dxvk_library_path = meson.source_root() + '/lib32'
 endif
 
-dxvk_extradep = [ ]
+code = '''#ifndef __WINE__
+#error 1
+#endif'''
 
-if dxvk_is_msvc
-  wrc = find_program('rc')
-else
-  add_global_link_arguments('-static', '-static-libgcc', language: 'c')
-  add_global_link_arguments('-static', '-static-libgcc', '-static-libstdc++', language: 'cpp')
+dxvk_winelib = dxvk_compiler.compiles(code, name: 'winelib check')
+dxvk_extradep = [ ]
 
-  if cpu_family == 'x86_64'
-    wrc = find_program('x86_64-w64-mingw32-windres')
-  elif cpu_family == 'x86'
-    wrc = find_program('i686-w64-mingw32-windres')
+if dxvk_winelib
+  march = ''
+  if cpu_family == 'x86'
+    march = '-m32'
   else
-    error('Unsupported target architecture')
+    march = '-m64'
   endif
-endif
-
-if cpu_family == 'x86_64'
-  if dxvk_compiler.has_argument('-msse3')
-    add_project_arguments('-msse3', language: ['c', 'cpp'])
+  add_project_arguments(march, '-fvisibility=hidden', language: 'c')
+  add_project_arguments(march, '-fvisibility=hidden', '-fvisibility-inlines-hidden', '-D__WIDL_objidl_generated_name_0000000C=', language: 'cpp')
+  add_global_link_arguments(march, '-mwindows', language: 'c')
+  add_global_link_arguments(march, '-mwindows', language: 'cpp')
+  if dxvk_compiler.has_argument('--no-gnu-unique')
+    add_project_arguments('--no-gnu-unique', language : ['cpp'])
   endif
-elif cpu_family == 'x86'
-  if dxvk_compiler.has_link_argument('-Wl,--add-stdcall-alias')
-    add_global_link_arguments('-Wl,--add-stdcall-alias', language: 'cpp')
-  endif
-  if dxvk_compiler.has_link_argument('-Wl,--enable-stdcall-fixup')
-    add_global_link_arguments('-Wl,--enable-stdcall-fixup', language: 'cpp')
+  if cpu_family == 'x86_64'
+    if dxvk_compiler.has_argument('-msse3')
+      add_project_arguments('-msse3', language: ['c', 'cpp'])
+    endif
+  elif cpu_family == 'x86'
+    if dxvk_compiler.has_argument('-msse') and dxvk_compiler.has_argument('-msse2') and dxvk_compiler.has_argument('-msse3')
+      add_project_arguments('-msse', '-msse2', '-msse3', language: ['c', 'cpp'])
+    endif
+    if dxvk_compiler.has_argument('-mfpmath=sse')
+      add_project_arguments('-mfpmath=sse', language: ['c', 'cpp'])
+    endif
   endif
-  if dxvk_compiler.has_argument('-msse') and dxvk_compiler.has_argument('-msse2') and dxvk_compiler.has_argument('-msse3')
-    add_project_arguments('-msse', '-msse2', '-msse3', language: ['c', 'cpp'])
+  wrc = find_program('wrc')
+  lib_vulkan  = declare_dependency(link_args: [ '-lwinevulkan' ])
+  lib_d3d9    = declare_dependency(link_args: [ '-ld3d9' ])
+  lib_d3d11   = declare_dependency(link_args: [ '-ld3d11' ])
+  lib_dxgi    = declare_dependency(link_args: [ '-ldxgi' ])
+  lib_d3dcompiler_43 = declare_dependency(link_args: [ '-L'+dxvk_library_path, '-ld3dcompiler_43' ])
+  lib_d3dcompiler_47 = declare_dependency(link_args: [ '-ld3dcompiler' ])
+  dxvk_extradep += [ declare_dependency(link_args: [ '-ldl' ]) ]
+  exe_ext = '.exe.so'
+  dll_ext = '.dll'
+  res_ext = '.res'
+  def_spec_ext = '.spec'
+else
+  if dxvk_is_msvc
+    wrc = find_program('rc')
+  else
+    add_global_link_arguments('-static', '-static-libgcc', language: 'c')
+    add_global_link_arguments('-static', '-static-libgcc', '-static-libstdc++', language: 'cpp')
+  
+    if cpu_family == 'x86_64'
+      wrc = find_program('x86_64-w64-mingw32-windres')
+    elif cpu_family == 'x86'
+      wrc = find_program('i686-w64-mingw32-windres')
+    else
+      error('Unsupported target architecture')
+    endif
   endif
-  if dxvk_compiler.has_argument('-mfpmath=sse')
-    add_project_arguments('-mfpmath=sse', language: ['c', 'cpp'])
+  if cpu_family == 'x86_64'
+    if dxvk_compiler.has_argument('-msse3')
+      add_project_arguments('-msse3', language: ['c', 'cpp'])
+    endif
+  elif cpu_family == 'x86'
+    if dxvk_compiler.has_link_argument('-Wl,--add-stdcall-alias')
+      add_global_link_arguments('-Wl,--add-stdcall-alias', language: 'cpp')
+    endif
+    if dxvk_compiler.has_link_argument('-Wl,--enable-stdcall-fixup')
+      add_global_link_arguments('-Wl,--enable-stdcall-fixup', language: 'cpp')
+    endif
+    if dxvk_compiler.has_argument('-msse') and dxvk_compiler.has_argument('-msse2') and dxvk_compiler.has_argument('-msse3')
+      add_project_arguments('-msse', '-msse2', '-msse3', language: ['c', 'cpp'])
+    endif
+    if dxvk_compiler.has_argument('-mfpmath=sse')
+      add_project_arguments('-mfpmath=sse', language: ['c', 'cpp'])
+    endif
   endif
-endif
 
-lib_vulkan  = dxvk_compiler.find_library('vulkan-1', dirs : dxvk_library_path)
-lib_d3d9    = dxvk_compiler.find_library('d3d9')
-lib_d3d11   = dxvk_compiler.find_library('d3d11')
-lib_dxgi    = dxvk_compiler.find_library('dxgi')
-lib_d3dcompiler_43 = dxvk_compiler.find_library('d3dcompiler_43', dirs : dxvk_library_path)
+  lib_vulkan  = dxvk_compiler.find_library('vulkan-1', dirs : dxvk_library_path)
+  lib_d3d9    = dxvk_compiler.find_library('d3d9')
+  lib_d3d11   = dxvk_compiler.find_library('d3d11')
+  lib_dxgi    = dxvk_compiler.find_library('dxgi')
+  lib_d3dcompiler_43 = dxvk_compiler.find_library('d3dcompiler_43', dirs : dxvk_library_path)
 
-if dxvk_is_msvc
-  lib_d3dcompiler_47 = dxvk_compiler.find_library('d3dcompiler')
-else
-  lib_d3dcompiler_47 = dxvk_compiler.find_library('d3dcompiler_47')
-endif
+  if dxvk_is_msvc
+    lib_d3dcompiler_47 = dxvk_compiler.find_library('d3dcompiler')
+  else
+    lib_d3dcompiler_47 = dxvk_compiler.find_library('d3dcompiler_47')
+  endif
 
-exe_ext = ''
-dll_ext = ''
+  exe_ext = ''
+  dll_ext = ''
 
-if dxvk_is_msvc
-  res_ext = '.res'
-else
-  res_ext = '.o'
-endif
+  if dxvk_is_msvc
+    res_ext = '.res'
+  else
+    res_ext = '.o'
+  endif
 
-def_spec_ext = '.def'
+  def_spec_ext = '.def'
+endif
 
 glsl_compiler = find_program('glslangValidator')
 glsl_args = [ '-V', '--vn', '@BASENAME@', '@INPUT@', '-o', '@OUTPUT@' ]
diff --git a/package-release.sh b/package-release.sh
index 9318226c..12ad23b2 100755
--- a/package-release.sh
+++ b/package-release.sh
@@ -5,7 +5,7 @@ set -e
 shopt -s extglob
 
 if [ -z "$1" ] || [ -z "$2" ]; then
-  echo "Usage: $0 version destdir [--no-package] [--dev-build]"
+  echo "Usage: $0 version destdir [--no-package] [--dev-build] [--winelib]"
   exit 1
 fi
 
@@ -24,6 +24,7 @@ shift 2
 opt_nopackage=0
 opt_devbuild=0
 opt_buildid=false
+opt_winelib=0
 
 crossfile="build-win"
 
@@ -39,6 +40,10 @@ while [ $# -gt 0 ]; do
   "--build-id")
     opt_buildid=true
     ;;
+  "--winelib")
+    opt_winelib=1
+    crossfile="build-wine"
+    ;;
   *)
     echo "Unrecognized option: $1" >&2
     exit 1
diff --git a/src/d3d10/meson.build b/src/d3d10/meson.build
index 46a10c4b..9257145a 100644
--- a/src/d3d10/meson.build
+++ b/src/d3d10/meson.build
@@ -12,9 +12,11 @@ d3d10_main_src = [
   'd3d10_state_block.cpp',
 ]
 
+d3d10_d3d11_dep = dxvk_winelib ? lib_d3d11 : d3d11_dep
+
 d3d10_core_dll = shared_library('d3d10core'+dll_ext, d3d10_core_src, d3d10_core_res,
   name_prefix         : '',
-  dependencies        : [ d3d11_dep ],
+  dependencies        : [ d3d10_d3d11_dep ],
   include_directories : dxvk_include_path,
   install             : true,
   objects             : not dxvk_is_msvc ? 'd3d10core'+def_spec_ext : [],
diff --git a/src/dxgi/dxgi_swapchain.cpp b/src/dxgi/dxgi_swapchain.cpp
index d02c62b5..5376f893 100644
--- a/src/dxgi/dxgi_swapchain.cpp
+++ b/src/dxgi/dxgi_swapchain.cpp
@@ -14,9 +14,15 @@ namespace dxvk {
     m_window    (hWnd),
     m_desc      (*pDesc),
     m_descFs    (*pFullscreenDesc),
-    m_presentCount(0u),
     m_presenter (pPresenter),
     m_monitor   (nullptr) {
+    // Initialize frame statistics
+    m_stats.PresentCount         = 0;
+    m_stats.PresentRefreshCount  = 0;
+    m_stats.SyncRefreshCount     = 0;
+    m_stats.SyncQPCTime.QuadPart = 0;
+    m_stats.SyncGPUTime.QuadPart = 0;
+    
     if (FAILED(m_presenter->GetAdapter(__uuidof(IDXGIAdapter), reinterpret_cast<void**>(&m_adapter))))
       throw DxvkError("DXGI: Failed to get adapter for present device");
     
@@ -165,22 +171,10 @@ namespace dxvk {
   
   
   HRESULT STDMETHODCALLTYPE DxgiSwapChain::GetFrameStatistics(DXGI_FRAME_STATISTICS* pStats) {
-    std::lock_guard<std::recursive_mutex> lock(m_lockWindow);
-
-    if (!pStats)
+    if (pStats == nullptr)
       return E_INVALIDARG;
-
-    static bool s_errorShown = false;
-
-    if (!std::exchange(s_errorShown, true))
-      Logger::warn("DxgiSwapChain::GetFrameStatistics: Semi-stub");
-
-    // TODO deal with the refresh counts at some point
-    pStats->PresentCount = m_presentCount;
-    pStats->PresentRefreshCount = 0;
-    pStats->SyncRefreshCount = 0;
-    pStats->SyncQPCTime.QuadPart = dxvk::high_resolution_clock::getCounter();
-    pStats->SyncGPUTime.QuadPart = 0;
+    
+    *pStats = m_stats;
     return S_OK;
   }
   
@@ -234,7 +228,7 @@ namespace dxvk {
     if (pLastPresentCount == nullptr)
       return E_INVALIDARG;
     
-    *pLastPresentCount = m_presentCount;
+    *pLastPresentCount = m_stats.PresentCount;
     return S_OK;
   }
   
@@ -265,10 +259,7 @@ namespace dxvk {
     std::lock_guard<std::mutex> lockBuf(m_lockBuffer);
 
     try {
-      HRESULT hr = m_presenter->Present(SyncInterval, PresentFlags, nullptr);
-      if (hr == S_OK && !(PresentFlags & DXGI_PRESENT_TEST))
-        m_presentCount++;
-      return hr;
+      return m_presenter->Present(SyncInterval, PresentFlags, nullptr);
     } catch (const DxvkError& err) {
       Logger::err(err.message());
       return DXGI_ERROR_DRIVER_INTERNAL_ERROR;
diff --git a/src/dxgi/dxgi_swapchain.h b/src/dxgi/dxgi_swapchain.h
index a071ae4a..b39ff6f4 100644
--- a/src/dxgi/dxgi_swapchain.h
+++ b/src/dxgi/dxgi_swapchain.h
@@ -11,8 +11,6 @@
 
 #include "../spirv/spirv_module.h"
 
-#include "../util/util_time.h"
-
 namespace dxvk {
   
   class DxgiDevice;
@@ -186,8 +184,8 @@ namespace dxvk {
     HWND                            m_window;
     DXGI_SWAP_CHAIN_DESC1           m_desc;
     DXGI_SWAP_CHAIN_FULLSCREEN_DESC m_descFs;
-    UINT                            m_presentCount;
-
+    DXGI_FRAME_STATISTICS           m_stats;
+    
     Com<IDXGIVkSwapChain>           m_presenter;
     
     HMONITOR                        m_monitor;
