commit d2d7ebc9a026edfc80c6f43851ec8a16265d0111
Author: TheGreatMcPain <sixsupersonic@gmail.com>
Date:   Thu Jan 7 20:38:45 2021 -0600

    Fix build with winelib

diff --git a/src/dxvk/dxvk_openxr.cpp b/src/dxvk/dxvk_openxr.cpp
index d632b989..7ab07aa9 100644
--- a/src/dxvk/dxvk_openxr.cpp
+++ b/src/dxvk/dxvk_openxr.cpp
@@ -5,6 +5,17 @@
 #pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
 #endif
 
+#ifdef __WINE__
+#include <dlfcn.h>
+
+#pragma push_macro("_WIN32")
+#undef _WIN32
+#endif
+
+#ifdef __WINE__
+#pragma pop_macro("_WIN32")
+#endif
+
 using PFN___wineopenxr_GetVulkanInstanceExtensions = int (WINAPI *)(uint32_t, uint32_t *, char *);
 using PFN___wineopenxr_GetVulkanDeviceExtensions = int (WINAPI *)(uint32_t, uint32_t *, char *);
 
@@ -148,21 +159,36 @@ namespace dxvk {
 
   SoHandle DxvkXrProvider::loadLibrary() {
     SoHandle handle = nullptr;
+    #ifdef __WINE__
+    if (!(handle = ::dlopen("libwineopenxr.so", RTLD_LAZY | RTLD_NOLOAD)))
+      handle = ::dlopen("libwineopenxr.so", RTLD_LAZY | RTLD_LOCAL);
+    m_loadedOxrApi = handle != nullptr;
+    #else
     if (!(handle = ::GetModuleHandle("wineopenxr.dll"))) {
       handle = ::LoadLibrary("wineopenxr.dll");
       m_loadedOxrApi = handle != nullptr;
     }
+    #endif
     return handle;
   }
 
 
   void DxvkXrProvider::freeLibrary() {
+    #ifdef __WINE__
+    ::dlclose(m_wineOxr);
+    #else
     ::FreeLibrary(m_wineOxr);
+    #endif
   }
 
   
   void* DxvkXrProvider::getSym(const char* sym) {
+    #ifdef __WINE__
+    return reinterpret_cast<void*>(
+      ::dlsym(m_wineOxr, sym));
+    #else
     return reinterpret_cast<void*>(
       ::GetProcAddress(m_wineOxr, sym));
+    #endif
   }
 }
